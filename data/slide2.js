(function(){var loadHandler=window['sl_{21A6D27D-026E-407E-9520-E3E39CF36F80}'];loadHandler&&loadHandler(1, '<div id="spr0_22ca40"><div id="spr1_22ca40" class="kern slide"><img id="img6_22ca40" src="data/img3.png" width="960px" height="540px" alt="" style="left:0px;top:0px;"/><div id="spr3_22ca40" style="left:5px;top:523px;"><div style="width:0px;"><span id="txt0_22ca40" class="nokern" data-width="100.751953" style="top:-1.265px;">Classified as Confidential</span></div></div></div><div id="spr2_22ca40" class="kern slide"><div id="spr4_22ca40" style="left:377.5px;top:6.626px;"><img id="img0_22ca40" src="data/img1.png" width="142.546" height="73.238" alt=""/></div><div id="spr5_22ca40" style="left:419px;top:26px;"><img id="img1_22ca40" src="data/img4.png" width="69" height="39" alt="RTL"/></div><div id="svg0_22ca40" style="left:26.2px;top:69.29px;"><svg width="935" height="172" viewBox="-19.042 -19.042 935 172"><path fill="none" stroke="#808080" stroke-width="0.8" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="8" d="M0.125,18.792 a18.667,18.667 0 0,1 18.667,-18.667 h858.466 a18.667,18.667 0 0,1 18.667,18.667 v95.936 a18.667,18.667 0 0,1 -18.667,18.667 h-858.466 a18.667,18.667 0 0,1 -18.667,-18.667 Z" fill-rule="evenodd"/></svg></div><div id="spr6_22ca40" style="left:45.242px;top:88.332px;"><div style="width:0px;"><span id="txt1_22ca40" data-width="606.603516" style="left:12.792px;top:6.915px;">Register Transfer Language: that is a design description language used to describe :</span></div><div style="width:0px;"><span id="txt2_22ca40" data-width="819.166992" style="left:12.792px;top:28.515px;">-    the data movements and transfers between registers and each other or between registers and main memory</span></div><div style="width:0px;"><span id="txt3_22ca40" class="nokern relpos" dir="auto" style="left:12.792px;top:50.115px;">-</span> <span id="txt4_22ca40" class="relpos" data-width="780.503906" style="left:29.782px;top:50.115px;">The operations applied on data stored in those registers and those type of operations is determined by the</span></div><div style="width:0px;"><span id="txt5_22ca40" data-width="90.694336" style="left:35.292px;top:71.715px;">instructions.</span></div><div style="width:0px;"><span id="txt6_22ca40" class="nokern relpos" dir="auto" style="left:12.792px;top:93.315px;">-</span> <span id="txt7_22ca40" class="relpos" data-width="706.561523" style="left:29.782px;top:93.315px;">We call those operations that is performed on microarchitecture like register as microoperations</span></div></div><div id="spr7_22ca40" style="left:13.438px;top:145.353px;"><img id="img2_22ca40" src="data/img0.png" width="28" height="21" alt="" style="left:-0.597px;top:-0.761px;"/></div><div id="svg2_22ca40" style="left:29.512px;top:223.115px;"><svg width="930" height="149" viewBox="-16.534 -16.534 930 149"><path fill="none" stroke="#808080" stroke-width="0.8" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="8" d="M0.125,16.284 a16.159,16.159 0 0,1 16.159,-16.159 h863.482 a16.159,16.159 0 0,1 16.159,16.159 v83.046 a16.159,16.159 0 0,1 -16.159,16.159 h-863.482 a16.159,16.159 0 0,1 -16.159,-16.159 Z" fill-rule="evenodd"/></svg></div><div id="spr8_22ca40" style="left:46.046px;top:239.649px;"><div style="width:0px;"><span id="txt8_22ca40" data-width="191.153320" style="left:12.058px;top:6.181px;">Types of microoperations:</span></div><div style="width:0px;"><span id="txt9_22ca40" class="relpos" data-width="84.776489" style="left:12.058px;top:27.781px;">Arithmetic</span> <span id="txt10_22ca40" class="relpos" data-width="308.223633" style="left:12.053px;top:27.781px;">: Add – Subtract – increment – Decrement</span></div><div style="width:0px;"><span id="txt11_22ca40" class="relpos" data-width="58.479610" style="left:12.058px;top:49.381px;">Logical</span> <span id="txt12_22ca40" class="relpos" data-width="217.125000" style="left:12.053px;top:49.381px;">: And – Or – Not – XOR - Clear</span></div><div style="width:0px;"><span id="txt13_22ca40" class="relpos" data-width="40.224728" style="left:12.058px;top:70.981px;">Shift</span> <span id="txt14_22ca40" class="relpos" data-width="417.735352" style="left:12.053px;top:70.981px;">: Logical Left shift – Logical right shift – Circular shift (L/R)</span></div></div><div id="spr9_22ca40" style="left:13.438px;top:287.716px;"><img id="img3_22ca40" src="data/img0.png" width="28" height="21" alt="" style="left:-0.597px;top:-0.761px;"/></div><div id="svg4_22ca40" style="left:29.512px;top:356.239px;"><svg width="930" height="149" viewBox="-16.534 -16.534 930 149"><path fill="none" stroke="#808080" stroke-width="0.8" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="8" d="M0.125,16.284 a16.159,16.159 0 0,1 16.159,-16.159 h863.482 a16.159,16.159 0 0,1 16.159,16.159 v83.046 a16.159,16.159 0 0,1 -16.159,16.159 h-863.482 a16.159,16.159 0 0,1 -16.159,-16.159 Z" fill-rule="evenodd"/></svg></div><div id="spr10_22ca40" style="left:59px;top:386px;"><img id="img4_22ca40" src="data/img5.png" width="866" height="58" alt="Bit manipulation is done through shift 𝝁−𝒐𝒑𝒆𝒓𝒂𝒕𝒊𝒐𝒏s that manipulates bit positions\
Also, it could be done using Logical 𝝁−𝒐𝒑𝒆𝒓𝒂𝒕𝒊𝒐𝒏 that manipulates specific bits whether masking the bits with AND , setting the bits with OR, toggling specific bit values using XOR and finally, invert or flip all bits at once using NOT.\
\
"/></div><div id="spr11_22ca40" style="left:13.438px;top:420.841px;"><img id="img5_22ca40" src="data/img0.png" width="28" height="21" alt="" style="left:-0.597px;top:-0.761px;"/></div></div></div>', '{"s":[]}');})();